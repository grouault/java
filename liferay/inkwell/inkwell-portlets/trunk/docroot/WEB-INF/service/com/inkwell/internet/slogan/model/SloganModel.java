/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.inkwell.internet.slogan.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Slogan service. Represents a row in the &quot;Slogan_Slogan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.inkwell.internet.slogan.model.impl.SloganModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.inkwell.internet.slogan.model.impl.SloganImpl}.
 * </p>
 *
 * @author gildas
 * @see Slogan
 * @see com.inkwell.internet.slogan.model.impl.SloganImpl
 * @see com.inkwell.internet.slogan.model.impl.SloganModelImpl
 * @generated
 */
public interface SloganModel extends BaseModel<Slogan>, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a slogan model instance should use the {@link Slogan} interface instead.
	 */

	/**
	 * Returns the primary key of this slogan.
	 *
	 * @return the primary key of this slogan
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this slogan.
	 *
	 * @param primaryKey the primary key of this slogan
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this slogan.
	 *
	 * @return the uuid of this slogan
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this slogan.
	 *
	 * @param uuid the uuid of this slogan
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the slogan ID of this slogan.
	 *
	 * @return the slogan ID of this slogan
	 */
	public long getSloganId();

	/**
	 * Sets the slogan ID of this slogan.
	 *
	 * @param sloganId the slogan ID of this slogan
	 */
	public void setSloganId(long sloganId);

	/**
	 * Returns the slogan date of this slogan.
	 *
	 * @return the slogan date of this slogan
	 */
	public Date getSloganDate();

	/**
	 * Sets the slogan date of this slogan.
	 *
	 * @param sloganDate the slogan date of this slogan
	 */
	public void setSloganDate(Date sloganDate);

	/**
	 * Returns the slogan text of this slogan.
	 *
	 * @return the slogan text of this slogan
	 */
	@AutoEscape
	public String getSloganText();

	/**
	 * Sets the slogan text of this slogan.
	 *
	 * @param sloganText the slogan text of this slogan
	 */
	public void setSloganText(String sloganText);

	/**
	 * Returns the status of this slogan.
	 *
	 * @return the status of this slogan
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this slogan.
	 *
	 * @param status the status of this slogan
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this slogan.
	 *
	 * @return the status by user ID of this slogan
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this slogan.
	 *
	 * @param statusByUserId the status by user ID of this slogan
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this slogan.
	 *
	 * @return the status by user uuid of this slogan
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this slogan.
	 *
	 * @param statusByUserUuid the status by user uuid of this slogan
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this slogan.
	 *
	 * @return the status by user name of this slogan
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this slogan.
	 *
	 * @param statusByUserName the status by user name of this slogan
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this slogan.
	 *
	 * @return the status date of this slogan
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this slogan.
	 *
	 * @param statusDate the status date of this slogan
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the company ID of this slogan.
	 *
	 * @return the company ID of this slogan
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this slogan.
	 *
	 * @param companyId the company ID of this slogan
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this slogan.
	 *
	 * @return the group ID of this slogan
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this slogan.
	 *
	 * @param groupId the group ID of this slogan
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this slogan.
	 *
	 * @return the user ID of this slogan
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this slogan.
	 *
	 * @param userId the user ID of this slogan
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this slogan.
	 *
	 * @return the user uuid of this slogan
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this slogan.
	 *
	 * @param userUuid the user uuid of this slogan
	 */
	public void setUserUuid(String userUuid);

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved()}
	 */
	@Override
	public boolean getApproved();

	/**
	 * Returns <code>true</code> if this slogan is approved.
	 *
	 * @return <code>true</code> if this slogan is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this slogan is denied.
	 *
	 * @return <code>true</code> if this slogan is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this slogan is a draft.
	 *
	 * @return <code>true</code> if this slogan is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this slogan is expired.
	 *
	 * @return <code>true</code> if this slogan is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this slogan is inactive.
	 *
	 * @return <code>true</code> if this slogan is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this slogan is incomplete.
	 *
	 * @return <code>true</code> if this slogan is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this slogan is pending.
	 *
	 * @return <code>true</code> if this slogan is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this slogan is scheduled.
	 *
	 * @return <code>true</code> if this slogan is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(Slogan slogan);

	@Override
	public int hashCode();

	@Override
	public CacheModel<Slogan> toCacheModel();

	@Override
	public Slogan toEscapedModel();

	@Override
	public Slogan toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}